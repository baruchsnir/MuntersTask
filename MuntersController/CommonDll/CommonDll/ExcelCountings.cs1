//#define write_all_Games_in_main_excel
//#define write_change_CurrentCulture
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using System.Diagnostics;
using System.Reflection;
using System.Collections.Specialized;
using System.Collections;
using System.Configuration;
using System.IO;
using Excel = Microsoft.Office.Interop.Excel;
using Range = Microsoft.Office.Interop.Excel.Range;
using Workbook = Microsoft.Office.Interop.Excel.Workbook;
using Worksheet = Microsoft.Office.Interop.Excel.Worksheet;
using Worksheets = Microsoft.Office.Interop.Excel.Worksheets;
using ExcelApplication = Microsoft.Office.Interop.Excel.Application;
using ChartObjects = Microsoft.Office.Interop.Excel.ChartObjects;
using ChartObject = Microsoft.Office.Interop.Excel.ChartObject;
using _Chart = Microsoft.Office.Interop.Excel._Chart;
using XlChartType = Microsoft.Office.Interop.Excel.XlChartType;
using XlRowCol = Microsoft.Office.Interop.Excel.XlRowCol;
using Microsoft.Office.Interop.Excel;
using FT.CommonDll.Ini;
using System.Drawing;
using System.Threading;

namespace FT.CommonDll
{
    public class ExcelCountings
    {
        #region Constructor
        public ExcelCountings()
        {

        }
        #endregion

        #region Destractor
        // DESTRACTOR
        // ------
        /// <summary>
        /// Distractor for Periodic Test Script
        /// </summary>
        public void Dispose()
        {
            try
            {
                IniFile ini = new IniFile(UTools.GetRunDir() + @"\setup.ini");
                if (excel != null)
                {
                    try
                    {
                        if (workbook != null)
                        {
                            worksheet = (Worksheet)workbook.Worksheets.get_Item(1);
                            workbook.Save();
                            workbook.Saved = true;
                            excel.UserControl = false;
                            workbook.Close(true, Type.Missing, Type.Missing);
                        }

                        if (workbook != null)
                            System.Runtime.InteropServices.Marshal.ReleaseComObject(worksheet);
                        if (worksheet != null)
                            System.Runtime.InteropServices.Marshal.ReleaseComObject(workbook);
                        System.Runtime.InteropServices.Marshal.ReleaseComObject(excel);
                        worksheet = null;
                        workbook = null;
                        excel.Quit();
                        excel = null;
                        Layers_Handler.instance().Free_All_WorkBooks();
                    }
                    catch
                    {
                        ;//  Console.WriteLine("User closed Excel manually, so we don't have to do that");
                    }
                    //  Layers_Handler.instance().KillExcelProcess("excel");
                }
            }
            catch {; }
        }
        #endregion

        #region Methods
        #region Generate_Countings
         public void Generate_Countings(string excel_file_games,bool calc_precnets)
        {
            this.filename = excel_file_games;
            Layers_Handler.instance().KillExcelProcess("excel");
            System.Globalization.CultureInfo oldCI = System.Threading.Thread.CurrentThread.CurrentCulture;
            string temp;
            Object[,] array1;
            try
            {
                excel = new ExcelApplication();
                workbook = excel.Workbooks.Open(excel_file_games, 0, false, System.Type.Missing, "", "", false, Excel.XlPlatform.xlWindows, "", false, false, 0, true, System.Type.Missing, System.Type.Missing);
                excel.Visible = true;

                //   excel.UserControl = true;
#if write_change_CurrentCulture
                System.Globalization.CultureInfo ci = new System.Globalization.CultureInfo("en-US");
                System.Threading.Thread.CurrentThread.CurrentCulture = ci;
#endif
                const String STYLE_NAME = "PropertyBorder";
                //Get the Sheets of this work book
                sheets = workbook.Worksheets;
                worksheet = (Worksheet)sheets.get_Item(2);
                worksheet.Select();
                temp = worksheet.Name;
                Range r;
                Excel.Style sty;

                try
                {
                    sty = workbook.Styles[STYLE_NAME];
                }
                catch
                {
                    sty = workbook.Styles.Add(STYLE_NAME, Type.Missing);
                }

                total_games = 0;
                temp = ini.ReadString("General", "Team 1", "R8:R21");
                r = worksheet.get_Range(temp, Missing.Value);
                array1 = (Object[,])r.Value2;

                for (int i = 1; i <= 15; i++)
                {
                    if (array1[i, 1] == null)
                        break;
                    if (array1[i, 1].ToString().Trim() == "")
                        break;
                    total_games++;
                }
                int max_cycle = 1;
                if (this.total_games > 7)
                    max_cycle = 2;
                for (cycle = 1; cycle <= max_cycle; cycle++)
                {
                    Get_Main_List();
                    Generate_Countings_For_6_Sites(calc_precnets);
                }
               
            }
            catch (Exception ex)
            {
                Layers_Handler.instance().sendMessageBox("Problem in  " + this.ToString() + " in WriteDataToExcelFile", ex, "Error in ToTo Application", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                Close_Excel();
            }
#if write_change_CurrentCulture
            System.Threading.Thread.CurrentThread.CurrentCulture = oldCI;
#endif
            //workbook.Save();
            //workbook.Close();
            //excel.Quit();
        }
        #endregion

        #region Get_Main_List
        private void Get_Main_List()
        {
            Range r;
            List<string> list;
            Object[,] array1;
            string temp;
            total_a = 0;
            total_b = 0;
            total_c = 0;
            int max_g = this.total_games;
            if (cycle == 1)
                max_g = 7;
            this.main_cel_a.Clear();
            this.main_cel_b.Clear();
            this.main_cel_c.Clear();
            for (int i = 1; i < 4; i++)
            {
                temp = ini.ReadString("General", "Main " + i, "R8:R21");
                r = worksheet.get_Range(temp, Missing.Value);
                array1 = (Object[,])r.Value2;
                list = new List<string>();
                for (int j = 1; j <= max_g; j++)
                {
                    if (array1[j, 1] == null)
                        temp = " ";
                    else
                        temp = array1[j, 1].ToString().Trim();
                    if (temp == "")
                        temp = " ";
                    if (array1[j, 1] != null)
                        array1[j, 1] = array1[j, 1].ToString().ToUpper().Trim();
                    list.Add(temp);
                    if (temp.Trim() != "")
                    {
                        switch (i)
                        {
                            case 1: total_a++;break;
                            case 2: total_b++; break;
                            case 3: total_c++; break;
                        }
                    }
                }
                switch (i)
                {
                    case 1: this.main_cel_a = list;break;
                    case 2: this.main_cel_b = list; break;
                    case 3: this.main_cel_c = list; break;
                }
                r.Value = array1;
            }
        }
        #endregion

        #region Get_Main_List
        private void Generate_Countings_For_6_Sites(bool calc_precnets)
        {
            Range r,r1;
            List<string> list;
            Object[,] array1;
            string temp;
            this.sits_list.Clear();
            this.counting_sites.Clear();
            start_ix = ini.ReadInt32("General", "Start Min", 83);
            min_colomn = ini.ReadString("General", "Min Site 1", "A");
            float_colomn = ini.ReadString("General", "Min 1 Float", "A");
            int ix;
            ix = start_ix -1;
            if (!calc_precnets)
            {
                if (cycle == 1)
                {
                    for (int i = 1; i <= 12; i++)
                    {
                        ix++;
                        temp = ini.ReadString("General", "Counts Site " + i, "A1");
                        r = worksheet.get_Range(temp, Missing.Value);
                        r.Value2 = "/ /";
                        temp = string.Format("{0}{1}", min_colomn, ix);
                        r = worksheet.get_Range(temp, Missing.Value);
                        r.Value2 = "";
                        temp = string.Format("{0}{1}", float_colomn, ix);
                        r = worksheet.get_Range(temp, Missing.Value);
                        r.Value2 = "";
                        ix++;
                        temp = string.Format("{0}{1}", min_colomn, ix);
                        r = worksheet.get_Range(temp, Missing.Value);
                        r.Value2 = "";
                        temp = string.Format("{0}{1}", float_colomn, ix);
                        r = worksheet.get_Range(temp, Missing.Value);
                        r.Value2 = "";

                    }
                    for (int j = 1; j <= 14; j++)
                    {
                        for (int i = 1; i <= 2; i++)
                        {
                            temp = ini.ReadString("General", string.Format("Total Site {0} {1}", j, i), "G2");
                            r1 = worksheet.get_Range(temp, Missing.Value);
                            r1.Value2 = "";
                        }
                    }
                }
            }
            for (int i = 1; i <= 14; i++)
            {
                temp = ini.ReadString("General", "Site " + i, "G8:G21");
                r = worksheet.get_Range(temp, Missing.Value);
                array1 = (Object[,])r.Value2;
                list = new List<string>();
                for (int j = 1; j <= this.total_games; j++)
                {
                    if (array1[j, 1] == null)
                        break;
                    temp = array1[j, 1].ToString().Trim();
                    if (temp == "")
                        temp = " ";
                    list.Add(temp);
                    if (array1[j, 1] != null)
                        array1[j, 1] = array1[j, 1].ToString().ToUpper().Trim();
                }
                r.Value = array1;
                sits_list[i] = list;
            }
            if (!calc_precnets)
            {
                for (int i = 1; i <= 14; i++)
                {
                    Check_Only_Counting_With_Site(i);
                }
            }
            else
            {
                for (int i = 1; i <= 6; i++)
                {
                    Check_Counting_With_Site(i);
                }
            }
        }
        #endregion


        #region Check_Counting_With_Site
        private void Check_Counting_With_Site(int site)
        {
            Range r;
            string a;
            char[] list_char, list_main_char;
            int[] count_list = new int[3] { 0, 0, 0 };
            int[] count_equels = new int[3] { 0, 0, 0 };
            List<string> list = null;
            List<string> list_main = null;
            string temp_s, temp_main, count_s = "";
            if (sits_list.ContainsKey(site))
                list = sits_list[site];
            else
                return;
            if (list.Count == 0)
                return;
            if (site == 2)
                site = 2;
            int max = 7;
            curent_site = site;
            if (this.cycle > 1)
            {
                curent_site += 6;
                max = total_games;
            }
            a = ini.ReadString("General", "Counts Site " + curent_site, "G2");
            r = worksheet.get_Range(a, Missing.Value);
            //b = ini.ReadString("General", "Total Site " + curent_site, "G2");
            if (a == "AA25")
                System.Diagnostics.Trace.WriteLine("AA25");
            int count = 0;
            bool find_one;
            #region calc Precents
            count_s = "";
            for (int i = 1; i < 4; i++)
            {
                count = 0;
                switch (i)
                {
                    case 1: list_main = main_cel_a; break;
                    case 2: list_main = main_cel_b; break;
                    case 3: list_main = main_cel_c; break;
                }

                for (int j = 0; j < max; j++)
                {
                    temp_s = list[j].ToLower().Trim();
                    temp_main = list_main[j].ToLower().Replace(" ", "");
                    if ((temp_s != "") && (temp_main != ""))
                    {
                        list_char = temp_s.ToCharArray();
                        list_main_char = temp_main.ToCharArray();
                        find_one = false;
                        for (int kk = 0; kk < list_char.Length; kk++)
                        {
                            for (int jj = 0; jj < list_main_char.Length; jj++)
                            {
                                if (list_char[kk] == list_main_char[jj])
                                {
                                    find_one = true;
                                    count++;
                                    break;
                                }
                            }
                            if (find_one)
                                break;
                        }
                    }
                    switch (i)
                    {
                        case 1: count_equels[0] = count; break;
                        case 2: count_equels[1] = count; break;
                        case 3: count_equels[2] = count; break;
                    }
                    counting_equels[site] = count_equels;
                }
                count_s += count;
                if (i < 3)
                    count_s += "/";
                r.Value2 = count_s;


            }
            if (site < 7)
                Write_Countings_For_Site(site);
            #endregion
        }
        #endregion

        #region Check_Only_Counting_With_Site
        private void Check_Only_Counting_With_Site(int site)
        {
            Range  r1;
            Object[,] array1 = null;
            string a, b;
            int[] count_list = new int[3] { 0, 0, 0 };
            int[] count_equels = new int[3] { 0, 0, 0 };
            List<string> list = null;
            List<string> list_main = null;
            string temp_s;
            if (sits_list.ContainsKey(site))
                list = sits_list[site];
            else
                return;
            if (list.Count == 0)
                return;
            if (site == 2)
                site = 2;
            int max = 7;
            curent_site = site;
            if (this.cycle > 1)
            {
                curent_site += 6;
                max = total_games;
            }
            b = ini.ReadString("General", string.Format("Total Site {0} {1}", site, this.cycle), "G2");
            r1 = worksheet.get_Range(b, Missing.Value);
            array1 = (Object[,])r1.Value2;
            int count_1 = 0;
            int count_2 = 0;
            int count_x = 0;
            string x12 = "x";
            #region Count 1 X 2
            for (int j = 0; j < max; j++)
            {
                temp_s = "";
                temp_s = list[j].ToLower().Trim();
                if (site == 10)
                    temp_s = temp_s.Substring(0, 1);//only in AE8:AE22 we count the first letter
                if (temp_s.Length == 3)
                    temp_s = temp_s.Substring(0, 2);
                if ((temp_s == "1") || (temp_s == "1x"))
                    count_1++;
                if ((temp_s == "2") || (temp_s == "x2") || (temp_s == "2x"))
                    count_2++;
                if ((temp_s == "x") || (temp_s == "x1") || (temp_s == "12"))
                {
                    count_x++;
                    if (site == 12)
                        site = 12;
                }
                if (temp_s == "21")
                {
                    if (x12 == "x")
                    {
                        x12 = "2";
                        count_x++;
                    }
                    else
                    {
                        if (x12 == "2")
                        {
                            x12 = "x";
                            count_2++;
                        }
                    }
                }
            }

            count_list = new int[3] { 0, 0, 0 };
            count_list[0] = count_1;
            count_list[1] = count_x;
            count_list[2] = count_2;
            counting_sites[site] = count_list;
            array1[1, 1] = count_1;
            array1[2, 1] = count_x;
            array1[3, 1] = count_2;
            r1.Value = array1;
            #endregion
        }
        #endregion

        #region Write_Countings_For_Site
        private void Write_Countings_For_Site(int site)
        {
            Range r_min, r_max, r_results_min, r_results_max, r_site, r;
            int[] count_equels = counting_equels[site];
            string temp = "", temp_s;
            int min_a = 0;
            int min_b = 0;
            int min_c = 0;
            int max_a = 0;
            int max_b = 0;
            int max_c = 0;
            int temp_min, temp_max;
            int left_for_c = 0;
            int max_g;
            int left;
            float min, max;
            string[] lines;
            string c_min, c_max, c_min_float, c_max_float;
            for (int i = 1; i < 4; i++)
            {
                if (cycle == 1)
                    temp = ini.ReadString("General", "Main Bet " + i, "G2");
                else
                    temp = ini.ReadString("General", "Main Bet " + (i + 10), "G2");
                r = worksheet.get_Range(temp, Missing.Value);
                temp_s = r.Value2;
                temp_s = temp_s.Replace("(", "").Replace(")", "");
                lines = temp_s.Split(new string[] { "-", " " }, StringSplitOptions.RemoveEmptyEntries);
                if (lines.Length == 2)
                {
                    temp_min = 0;
                    temp_max = 0;
                    int.TryParse(lines[0], out temp_min);
                    int.TryParse(lines[1], out temp_max);
                    switch (i)
                    {
                        case 1: min_a = temp_min; max_a = temp_max; break;
                        case 2: min_b = temp_min; max_b = temp_max; break;
                        case 3: min_c = temp_min; max_c = temp_max; break;
                    }
                }
            }
            int ix = start_ix ;
            int iy = start_ix;
            int set_a, set_b, set_c;
            //temp = string.Format("{0}{1}", min_c, ix);
            //r = worksheet.get_Range(temp, Missing.Value);
            //r.Value2 = "";
            //temp = string.Format("{0}{1}", float_c, ix);
            //r = worksheet.get_Range(temp, Missing.Value);
            //r.Value2 = "";
           
            if (cycle == 2)
            {
                ix = start_ix + 12;
                 ix += (site - 1) * 2;
                if (site == 2)
                    site = 2;
            }
            else
                ix += (site - 1) * 2;
            iy = ix +1;

            c_min = string.Format("{0}{1}", min_colomn, ix);
            //temp = ini.ReadString("General", string.Format("Min Site {0}", curent_site), "G2");
            r_min = worksheet.get_Range(c_min, Missing.Value);
            // temp = ini.ReadString("General", string.Format("Max Site {0}", curent_site), "G2");
            c_max = string.Format("{0}{1}", min_colomn, iy);
            r_max = worksheet.get_Range(c_max, Missing.Value);
            // temp = ini.ReadString("General", string.Format("Min {0} Float", curent_site) , "G2");
            c_min_float = string.Format("{0}{1}", float_colomn, ix);
            r_results_min = worksheet.get_Range(c_min_float, Missing.Value);
            //temp = ini.ReadString("General", string.Format("Max {0} Float", curent_site), "G2");
            c_max_float = string.Format("{0}{1}", float_colomn, iy);
            r_results_max = worksheet.get_Range(c_max_float, Missing.Value);
            //temp = ini.ReadString("General", string.Format("Site {0} Result", curent_site), "G2"); 
            //r_site = worksheet.get_Range(temp, Missing.Value);
            max_g = total_games;
            if (cycle == 1)
                max_g = 7;
            else
                System.Diagnostics.Trace.WriteLine("cycle =2");
            set_a = 0;
            set_b = 0;
            set_c = 0;
            Get_Min_Max_For_All_Rows(min_a, min_b, min_c, ref set_a, ref set_b, ref set_c, max_g);
            temp = string.Format("({0}/{1})*{2} + ({3}/{4})*{5} + ({6}/{7})*{8}", count_equels[0], total_a, set_a, count_equels[1], total_b, set_b, count_equels[2], total_c, set_c);
            r_min.Value2 = temp;
            min = (((float)count_equels[0] * set_a) / (float)total_a) + (((float)count_equels[1] * set_b )/ (float)total_b) + (((float)count_equels[2] * set_c) / (float)total_c );
            r_results_min.Value2 = string.Format("{0:f2}", min);
            set_a = 0;
            set_b = 0;
            set_c = 0;
            Get_Min_Max_For_All_Rows(max_a, max_b, max_c, ref set_a, ref set_b,ref set_c, max_g);
            temp = string.Format("({0}/{1})*{2} + ({3}/{4})*{5} + ({6}/{7})*{8}", count_equels[0], total_a, set_a, count_equels[1], total_b, set_b, count_equels[2], total_c, set_c);
            r_max.Value2 = temp;
            max =  (((float)count_equels[0] * set_a) / (float)total_a) + (((float)count_equels[1] * set_b) / (float)total_b) + (((float)count_equels[2] * set_c) / (float)total_c);
            r_results_max.Value2 = string.Format("{0:f2}", max);


            // r_site.Value2 = string.Format("{0:f0} - {1:f0}", min, max);
        }//
        #endregion

        #region Get_Min_Max_For_All_Rows
        private void Get_Min_Max_For_All_Rows(int min_a, int min_b, int min_c, ref int set_a, ref int set_b, ref int set_c, int max_g)
        {
            int left_for_c = 0; int left = 0,max,total_left = 0;
            left_for_c = max_g - (min_a + min_b + min_c);
            if (left_for_c > 0)
            {
                left = left_for_c / 2;
                total_left = left_for_c - (left * 2);
            }
            set_a = 0;
            set_b = 0;
            set_c = 0;
            if ((min_a >= min_b) && (min_a >= min_c))
            {
                set_a = min_a;
                if (left_for_c > 0)
                {
                    set_b = min_b;
                    set_c = min_c;
                }
                else
                {
                    left_for_c = max_g - min_a;
                    left = left_for_c / 2;
                    total_left = left_for_c - (left * 2);
                }

                if (total_left > 0)
                {
                    set_b += left;
                    set_c += left;
                    if (min_b >= min_c)
                    {
                        set_b += total_left;
                    }
                    else
                    {
                        set_c += total_left;
                    }
                }
                else
                {
                    if (left > 1)
                    {
                        if (min_b >= min_c)
                        {
                            set_b += left +1;
                            set_c += left -1;
                        }
                        else
                        {
                            set_b += left - 1;
                            set_c += left + 1;
                        }
                    }
                    else
                    {
                        set_b += left;
                        set_c += left;
                    }
                 }
            }
            else
            {
                if ((min_b >= min_a) && (min_b >= min_c))
                {

                    set_b = min_b;
                    if (left_for_c > 0)
                    {
                        set_a = min_a;
                        set_c = min_c;
                    }
                    else
                    {
                        left_for_c = max_g - min_b;
                        left = left_for_c / 2;
                        total_left = left_for_c - (left * 2);
                    }
                

                    if (total_left > 0)
                    {
                        set_a += left;
                        set_c += left;
                        if (min_a >= min_c)
                        {
                            set_a += total_left;
                        }
                        else
                        {
                            set_c += total_left;
                        }
                    }
                    else
                    {
                        if (left > 1)
                        {
                            if (min_a >= min_c)
                            {
                                set_a += left + 1;
                                set_c += left - 1;
                            }
                            else
                            {
                                set_a += left - 1;
                                set_c += left + 1;
                            }
                        }
                        else
                        {
                            set_b += left;
                            set_c += left;
                        }
                    }
                }
                else
                {
                    if ((min_c >= min_a) && (min_c >= min_b))
                    {
                        set_c = min_c;
                        if (left_for_c > 0)
                        {
                            set_a = min_a;
                            set_b = min_b;
                        }
                        else
                        {
                            left_for_c = max_g - min_c;
                            left = left_for_c / 2;
                            total_left = left_for_c - (left * 2);
                        }

                       

                        if (total_left > 0)
                        {
                            set_a += left;
                            set_b += left;
                            if (min_a >= min_b)
                            {
                                set_a += total_left;
                            }
                            else
                            {
                                set_b += total_left;
                            }
                        }
                        else
                        {
                            if (left > 1)
                            {
                                if (min_a >= min_b)
                                {
                                    set_a += left + 1;
                                    set_b += left - 1;
                                }
                                else
                                {
                                    set_a += left - 1;
                                    set_b += left + 1;
                                }
                            }
                            else
                            {
                                set_a += left;
                                set_c += left;
                            }
                        }
                    }

                }
            }
        }
        #endregion

        #region Close_Excel
        public void Close_Excel()
        {
            try
            {

                Range r;
                for (int i = 1; i <= workbook.Worksheets.Count; i++)
                {
                    try
                    {
                        worksheet = (Worksheet)workbook.Worksheets.get_Item(i);
                        r = worksheet.get_Range("A1", Missing.Value);
                        r.Select();
                    }
                    catch
                    {
                    }
                }
                worksheet = (Worksheet)workbook.Worksheets.get_Item(1);
                try
                {
                    worksheet.Select();
                }
                catch {; }
                excel.UserControl = true;
                workbook.Save();
                workbook.Saved = true;

                workbook.Close(true, Type.Missing, Type.Missing);
                excel.Visible = true;
                excel.Quit();
                // if (workbook != null)
                //     System.Runtime.InteropServices.Marshal.ReleaseComObject(worksheet);
                // if (worksheet != null)
                //     System.Runtime.InteropServices.Marshal.ReleaseComObject(workbook);
                // if (sheets != null)
                //     System.Runtime.InteropServices.Marshal.ReleaseComObject(sheets);
                //// System.Runtime.InteropServices.Marshal.ReleaseComObject(excel);
                // worksheet = null;
                // workbook = null;
                // sheets = null;
                // excel = null;
                // set process properties using configuration
                ProcessStartInfo psi = new ProcessStartInfo();
                psi.Arguments ="";
                psi.FileName = this.filename;
                Process.Start(psi);

            }
            catch {; }
        }
        #endregion
        #endregion

        #region Properties
        // PROPERTIES
        // ----------
        public string Filename
        {
            get { return filename; }
            set { filename = value; }
        }
        #endregion

        #region Fields
        // FIELDS
        // ------
        private ExcelApplication excel = null;
        private Excel.Workbook workbook = null;
        private Excel.Sheets sheets = null;
        private Worksheet worksheet = null;
        private string filename = "";
        private IniFile ini = new IniFile(System.Windows.Forms.Application.StartupPath + @"\Page groups.ini");
        private int total_games = 0;
        private int total_a = 0;
        private int total_b = 0;
        private int total_c = 0;
        private List<string> main_cel_a = new List<string>();
        private List<string> main_cel_b = new List<string>();
        private List<string> main_cel_c = new List<string>();
        private Dictionary<int, List<string>> sits_list = new Dictionary<int, List<string>>();
        private Dictionary<int, int[]> counting_sites = new Dictionary<int, int[]>();
        private Dictionary<int, int[]> counting_equels = new Dictionary<int, int[]>();
        private int cycle = 1;
        private int curent_site = 1;
        private string min_colomn, float_colomn;
        private int start_ix = 83;
        #endregion
    }
}